{"version":3,"sources":["components/Items.js","components/Connections.js","App.js","serviceWorker.js","index.js"],"names":["Items","className","src","this","props","picture","alt","name","href","id","target","rel","title","strength","length","replace","slice","join","React","Component","Connections","usernameRef","createRef","getConnections","e","apiBaseEndpoint","preventDefault","axios","get","current","value","then","response","interestsName","data","interests","map","item","setState","error","topInterest","connections","res","person","publicId","all","spread","responses","connectionsStrengths","strengths","strengthsName","foo","connectionsPerson","forEach","index","catch","errors","console","log","matchInterests","matched","includes","handleErrors","state","userName","onSubmit","placeholder","ref","type","key","professionalHeadline","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.856d5840.chunk.js","sourcesContent":["import React from \"react\";\r\nclass Items extends React.Component {\r\n    // constructor(props){\r\n    //     super(props);\r\n    // }\r\n    render (){    \r\n        return(\r\n        <div className=\"connection-card\">\r\n            <img className=\"connection-image\" src={this.props.picture ? this.props.picture : '/not-found.png'} alt={this.props.name}/>\r\n            <a className=\"connection-link\" href={`https://bio.torre.co/${this.props.id}`} target=\"_blank\" rel=\"noopener noreferrer\"><h2 className=\"connection-name\">{this.props.name}</h2></a>\r\n            <h3 className=\"connection-title\">{this.props.title}</h3>\r\n            {this.props.strength.length === 0 ? <p>{this.props.name.replace(/ .*/,'')} doesn't have strengths set on their Torre profile.</p> : <p className=\"connection-strengths\"><b>Top Strengths: </b>{this.props.strength.slice(1, 5).join(', ')}</p>}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Items;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Items from './Items'\r\nclass Connections extends React.Component {\r\n\r\n    usernameRef = React.createRef();\r\n    constructor(props){\r\n        super(props);\r\n        this.state  ={\r\n          connections: [],\r\n          error: '', \r\n          topInterest : '',\r\n          userName: ''\r\n        }\r\n    }\r\n    \r\n    getConnections = (e) =>{\r\n        //using a middleware to test endpoints without CORS blocking\r\n        let apiBaseEndpoint = `https://cors-anywhere.herokuapp.com/bio.torre.co/api/`;\r\n        e.preventDefault();\r\n        axios.get(`${apiBaseEndpoint}bios/${this.usernameRef.current.value}`).then(response =>{\r\n            let userResponse = response.data;\r\n            let interestsName = userResponse.interests.map((item)=>{\r\n                return item.name\r\n            })\r\n            response.data.interests.length === 0 ? \r\n            this.setState ({\r\n                error: 'no-interest',\r\n                topInterest: '',\r\n                connections: []\r\n            }) : this.setState ({topInterest: interestsName});\r\n        });\r\n        axios.get(`${apiBaseEndpoint}people/${this.usernameRef.current.value}/connections?limit=6`).then(response => {\r\n        this.usernameRef.current.value = '';\r\n        // handle success\r\n        //map connections publicId\r\n        let res = response.data.map((item) => {\r\n            return axios.get(`${apiBaseEndpoint}bios/` + item.person.publicId);\r\n        });\r\n        //map connections publicIds into a GETable axios endpoint\r\n        // let urlBio = res.map((item)=>{\r\n        //     return axios.get(`${apiBaseEndpoint}bios/` + item)\r\n        // });\r\n        //GET user connection's bios\r\n        axios.all([...res]).then(axios.spread((...responses) => {\r\n            // use/access the results \r\n            let connectionsStrengths = responses.map((item)=>{\r\n                return item.data.strengths;\r\n            })\r\n            let strengthsName = connectionsStrengths.map((item) =>{\r\n                return item.map((foo)=>{\r\n                    return foo.name\r\n                })\r\n            })\r\n            let connectionsPerson = responses.map((item)=>{\r\n                return item.data.person;\r\n            })\r\n            connectionsPerson.forEach( (item, index) =>{\r\n                item.strength = strengthsName[index];\r\n            })\r\n            this.setState ({\r\n                error: null,\r\n                connections: connectionsPerson\r\n            })\r\n                        \r\n          })).catch(errors => {\r\n            this.setState({\r\n                error: 'not-connected',\r\n                topInterest: '',\r\n                connections: []\r\n            })\r\n            // react on errors.\r\n            console.log(errors);\r\n          })\r\n    }).catch(error => {\r\n        // handle error\r\n        this.usernameRef.current.value = '';\r\n        this.setState({\r\n            error: 'not-found',\r\n            topInterest: '',\r\n            connections: []\r\n            })\r\n            console.log(error);\r\n        })\r\n    }\r\n    matchInterests = (interests, strengths) =>{\r\n        let matched = interests.includes(strengths[0])\r\n        console.log(matched)\r\n    }\r\n    handleErrors = (error) =>{\r\n        switch (error) {\r\n            case \"not-found\":\r\n                return <p>User not found. Try again?</p>\r\n            case \"not-connected\":\r\n                return <p>You don't have connections on your Torre profile.</p>\r\n            case \"no-interest\":\r\n                return <p>You don't have any interests set on your Torre profile.</p>        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\nrender (){\r\n    return (<div className=\"content\">\r\n        <h1>Match your interests with your Torre connections strengths.</h1>\r\n        <br/>\r\n        <form onSubmit={this.getConnections}>\r\n            <input className=\"user-input\" placeholder=\"Input your username to get started\" ref={this.usernameRef} type=\"text\" name=\"username\" id=\"\"/> \r\n            <input type=\"submit\" value=\"GO\"/>\r\n        </form>\r\n        <h6>You can find your username like this: bio.torre.co/username</h6>\r\n        {this.handleErrors(this.state.error)}\r\n            {this.state.topInterest ? <h3>Your top interests are: {this.state.topInterest.join(', ')} </h3> : ''}\r\n        <div className=\"connection-container\">            \r\n            {this.state.connections.map(item => <Items key={item.publicId} id={item.publicId} title={item.professionalHeadline} name={item.name} picture={item.picture} strength={item.strength}></Items>)}\r\n        </div>\r\n    </div>)\r\n    }\r\n}\r\nexport default Connections;","import React from 'react';\nimport './App.css';\nimport Connections from './components/Connections';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Connections></Connections>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}